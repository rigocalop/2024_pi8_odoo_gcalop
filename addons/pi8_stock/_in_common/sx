# # clase_principal.py
# from clase_auxiliar import ClaseAuxiliar

    

    


# class sx_covert_base62:
#     @classmethod
#     def fromNumber(cls, num):
#         characters = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"
#         if num == 0:
#             return characters[0]
#         base = 62
#         result = ""
#         while num > 0:
#             result = characters[num % base] + result
#             num //= base
#         return result

#     @classmethod
#     def toNumber(cls, base62_string):
#         characters = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"
#         base = 62
#         length = len(base62_string)
#         num = 0

#         for i, char in enumerate(base62_string):
#             value = characters.index(char)
#             power = length - i - 1
#             num += value * (base ** power)
#         return num
    

# class sx_convert
#     @property
#     base62 = sx_covert_base62
    
#     @property
#     base36 = sx_covert_base36

# class sx:
#     convert = sx_convert
#     sx.convert.base62.toNumber('a')
    
    
#     # Resto de la definici√≥n de ClasePrincipal...    
    

